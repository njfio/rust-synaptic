[package]
name = "synaptic"
version = "0.1.0"
edition = "2021"
authors = ["Nicholas Ferguson <me@njf.io>"]
description = "Intelligent AI agent memory system with dynamic knowledge graphs and smart content updates"
license = "MIT"
repository = "https://github.com/njfio/rust-synaptic"
keywords = ["ai", "memory", "knowledge-graph", "agent", "intelligent"]
categories = ["data-structures", "algorithms", "science"]

[dependencies]
# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = { version = "1.3", optional = true }

# Async runtime
tokio = { version = "1.0", features = ["full"] }
async-trait = "0.1"

# Data structures
uuid = { version = "1.6", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
indexmap = "2.0"
num-traits = "0.2"

# Storage
sled = "0.34"
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "sqlite", "postgres", "chrono", "uuid", "json"], optional = true }

# Vector operations and similarity
ndarray = "0.15"
ordered-float = "4.0"

# Phase 1: Advanced AI Integration - Vector Embeddings
# Using simple TF-IDF implementation for baseline

# Phase 2: Distributed Architecture & Real-time Systems
tokio-stream = "0.1"
futures = "0.3"
tonic = { version = "0.10", optional = true }
prost = { version = "0.12", optional = true }
tonic-build = { version = "0.10", optional = true }
rdkafka = { version = "0.36", features = ["cmake-build"], optional = true }
redis = { version = "0.24", features = ["tokio-comp", "cluster"], optional = true }
# raft = { version = "0.7", optional = true }
# protobuf = { version = "3.4", optional = true }
lz4 = { version = "1.24", optional = true }
zstd = { version = "0.13", optional = true }
brotli = { version = "3.4", optional = true }
crossbeam = "0.8"
dashmap = "5.5"
parking_lot = "0.12"
tokio-tungstenite = { version = "0.20", optional = true }
futures-util = { version = "0.3", optional = true }
diff = "0.1"
lz4_flex = "0.11"

# Concurrency (already included above)

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = "0.3"

# Utilities
rayon = "1.7"
hex = "0.4"
sha2 = "0.10"
rand = "0.8"
aes-gcm = "0.10"

# Real External Integrations
reqwest = { version = "0.11", features = ["json", "stream"], optional = true }
candle-core = { version = "0.3", optional = true }
candle-nn = { version = "0.3", optional = true }
candle-transformers = { version = "0.3", optional = true }
tokenizers = { version = "0.15", optional = true }
plotters = { version = "0.3", optional = true }
plotters-backend = { version = "0.3", optional = true }
image = { version = "0.24", features = ["png", "jpeg", "webp"], optional = true }
base64 = { version = "0.21", optional = true }
dotenvy = "0.15.7"

# Phase 5: Multi-Modal & Cross-Platform
# Image Processing & Computer Vision
imageproc = { version = "0.23", optional = true }
rusttype = { version = "0.9", optional = true }
tesseract = { version = "0.13", optional = true }
opencv = { version = "0.88", optional = true, default-features = false }

# Audio Processing
rodio = { version = "0.17", optional = true }
hound = { version = "3.5", optional = true }
whisper-rs = { version = "0.10", optional = true }
cpal = { version = "0.15", optional = true }
dasp = { version = "0.11", optional = true }

# Code Analysis
tree-sitter = { version = "0.20", optional = true }
tree-sitter-rust = { version = "0.20", optional = true }
tree-sitter-python = { version = "0.20", optional = true }
tree-sitter-javascript = { version = "0.20", optional = true }
syn = { version = "2.0", features = ["full", "extra-traits"], optional = true }
proc-macro2 = { version = "1.0", optional = true }

# WebAssembly Support
wasm-bindgen = { version = "0.2", optional = true }
js-sys = { version = "0.3", optional = true }
web-sys = { version = "0.3", features = ["console", "Window", "Document", "Element", "HtmlElement"], optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
getrandom = { version = "0.2", features = ["js"], optional = true }

# Mobile & Cross-Platform
jni = { version = "0.21", optional = true }
ndk = { version = "0.7", optional = true }
swift-bridge = { version = "0.1", optional = true }

# Additional dependencies for Phase 5
md5 = { version = "0.7", optional = true }

# Phase 5B: Document Processing
# pdf = { version = "0.8", optional = true }
# docx = { version = "1.1", optional = true }
# markdown = { version = "1.0", optional = true }
pulldown-cmark = { version = "0.9", optional = true }
csv = { version = "1.3", optional = true }
# polars = { version = "0.35", features = ["lazy", "csv-file", "parquet", "json"], optional = true }
# calamine = { version = "0.22", optional = true }
walkdir = { version = "2.4", optional = true }
ignore = { version = "0.4", optional = true }
globset = { version = "0.4", optional = true }
mime_guess = { version = "2.0", optional = true }
encoding_rs = { version = "0.8", optional = true }
pdf-extract = "0.9"
zip = "0.6"
quick-xml = "0.31"

[dev-dependencies]
tempfile = "3.8"
criterion = "0.5"
base64 = "0.21"

[features]
default = ["file-storage", "memory-storage", "embeddings", "bincode"]
file-storage = []
memory-storage = []
sql-storage = ["sqlx"]
embeddings = []
vector-search = []
distributed = ["rdkafka", "redis", "tonic", "lz4"]
compression = ["lz4", "zstd", "brotli"]
realtime = ["tokio-tungstenite", "futures-util"]
analytics = []
ml-models = ["candle-core", "candle-nn", "candle-transformers", "tokenizers"]
llm-integration = ["reqwest", "base64"]
visualization = ["plotters", "plotters-backend", "image", "base64"]
external-integrations = ["sql-storage", "ml-models", "llm-integration", "visualization"]
security = []

# Phase 5: Multi-Modal & Cross-Platform Features
image-memory = ["image", "imageproc", "rusttype", "tesseract", "opencv"]
audio-memory = ["rodio", "hound", "whisper-rs", "cpal", "dasp"]
code-memory = ["tree-sitter", "tree-sitter-rust", "tree-sitter-python", "tree-sitter-javascript", "syn", "proc-macro2"]
multimodal = ["image-memory", "audio-memory", "code-memory"]

# Cross-Platform Support
wasm-support = ["wasm-bindgen", "js-sys", "web-sys", "wasm-bindgen-futures", "getrandom", "base64"]
mobile-support = ["jni", "ndk", "swift-bridge"]
cross-platform = ["wasm-support", "md5", "bincode"]

# Phase 5B: Advanced Document Processing
document-memory = ["pulldown-cmark", "mime_guess", "encoding_rs"]
data-memory = ["csv"]
folder-processing = ["walkdir", "ignore", "globset"]
document-processing = ["document-memory", "data-memory", "folder-processing"]

# Complete Phase 5
phase5 = ["multimodal", "cross-platform"]
phase5b = ["document-processing", "multimodal"]
phase5-complete = ["phase5", "phase5b"]

[[example]]
name = "basic_usage"
path = "examples/basic_usage.rs"

[[example]]
name = "phase3_analytics"
path = "examples/phase3_analytics.rs"
required-features = ["analytics"]

[[example]]
name = "real_integrations"
path = "examples/real_integrations.rs"

[[example]]
name = "combined_full_system"
path = "examples/combined_full_system.rs"
required-features = ["distributed", "external-integrations", "embeddings"]

[[example]]
name = "phase4_security_privacy"
path = "examples/phase4_security_privacy.rs"
required-features = ["security"]



[profile.release]
lto = true
codegen-units = 1
panic = "abort"
